<?php
/**
 * Created by PhpStorm.
 * User: yin
 * Date: 2019/5/1
 * Time: 9:07 PM
 */

namespace app\system\admin;



use app\lib\command\OnPayFiveMinute;
use app\lib\command\OnPayOneMinute;
use app\lib\command\Received;
use app\lib\command\Statistic;
use app\lib\exception\ParameterException;
use app\lib\exception\PinduoduoException;
use app\lib\google\GoogleAuthenticator;
use app\lib\pinduoduo\Constant;
use app\lib\pinduoduo\MobileClient;
use app\lib\pinduoduo\MobileLogin;
use app\lib\pinduoduo\Net;
use app\lib\pinduoduo\Tools;
use app\lib\tools\Mobile;
use app\lib\tools\RndChinaName;
use app\lib\tools\Server;
use app\lib\traits\AjaxResponse;
use app\system\model\Address;
use app\system\model\Cash;
use app\system\model\Client;
use app\system\model\Goods as GoodsModel;
use app\system\model\Goods;
use app\system\model\Stores;
use app\system\model\SystemUser;
use app\system\model\User as UserModel;
use app\system\model\Stores as StoresModel;
use app\system\model\Errors as ErrorsModel;
use app\system\model\Orders as OrdersModel;
use app\system\model\Reports as ReportsModel;
use app\system\model\Bank as BankModel;
use app\system\validate\AddressTpl;
use app\system\validate\User as UserValidate;
use app\system\validate\AddressTpl as AddressTplValidate;
use app\system\validate\Address as AddressValidate;
use app\system\validate\Stores as StoresValidate;
use app\system\validate\Goods as GoodsValidate;
use app\system\validate\Bank as BankValidate;
use think\console\Input;
use think\console\Output;
use think\Exception;

class Pinduoduo extends Admin
{

    //分页索引
    protected $page = 0;

    //分页大小
    protected $limit = 0;

    //添加ajax数据方法
    use AjaxResponse;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->page = max(input('get.page/d', 1), 1);
        $this->limit = input('get.limit/d', 10);
    }

    /**
     * 基础信息
     */
    public function infos()
    {
        $link = sprintf(
            "%s://%s%s",
            $_SERVER['REQUEST_SCHEME'],
            $_SERVER['HTTP_HOST'],
            str_replace('/admin.php', '', url('/index/pinduoduo/index'))
        );
        $api_key = \app\system\model\Config::get(['name'=>'api_key']);
        $this->view->assign('link', $link);
        $this->view->assign('api_key', $api_key['value']);
        return $this->view->fetch();
    }

    /**
     * 数据统计
     */
    public function reports()
    {
        if ($this->request->isAjax()) {

            $where = [];

            if (ADMIN_ID != 1) {
                $where = [
                    'admin_uid' => ADMIN_ID
                ];
            }

            $query = ReportsModel::where($where);

            $date = input('get.date/s', '');
            if ($date) {
                $date = explode(' ~ ', $date);
                if (count($date)==2) {
                    $date[1] = strtotime('+ 1 day', strtotime($date[1]));
                    $query->where('date', 'between time', [$date[0], $date[1]]);
                }
            }

            $list = $query->order('date', 'desc')->page($this->page)->limit($this->limit)->select();

            $count = $query->count('id');

            $day_sum = ReportsModel::sum('day_sum');
            $cy_day_sum = ReportsModel::sum('cy_day_sum');

            return $this->ajax_list($list, $count, ['day_sum'=>$day_sum, 'cy_day_sum'=>$cy_day_sum]);
        }
        return $this->view->fetch();
    }

    /**
     * 错误日志
     */
    public function errors()
    {
        if ($this->request->isAjax()) {

            $where = [];

            if (ADMIN_ID != 1) {
                $where = [
                    'admin_uid' => ADMIN_ID
                ];
            }

            $list = ErrorsModel::with(['admin'=>function($query){
                $query->field(['id','nick', 'mobile']);
            }])->where($where)->page($this->page)->limit($this->limit)->select();

            $count = ErrorsModel::where($where)->count('id');

            return $this->ajax_list($list, $count);
        }
        return $this->view->fetch();
    }

    /**
     * 订单列表
     */
    public function orders()
    {

        if ($this->request->isAjax()) {

            $order_sn = input('get.order_sn/s', '');
            $api_order_sn = input('get.api_order_sn/s', '');
            $agent = input('get.agent/d', 0);
            $date = input('get.date/s', '');
            $client = input('get.client/d', 0);
            $is_pay = input('get.is_pay/d', 0);
            $pay_type = input('get.pay_type/d', 0);

            $where = [];

            if (ADMIN_ID != 1) {
                $where['c_id'] = ADMIN_C_ID;
            }

            if ($agent) {
                $where['admin_uid'] = $agent;
            }

            if ($order_sn) {
                $where['order_sn'] = $order_sn;
            }

            if ($api_order_sn) {
                $where['api_order_sn'] = $api_order_sn;
            }

            if ($pay_type) {
                $where['pay_type'] = $pay_type;
            }

            $query = OrdersModel::with(['admin' => function ($query) {
                $query->field(['id', 'nick']);
            }, 'user', 'goods.stores', 'client.admin'])->where($where);

            if ($date) {
                $date = explode(' ~ ', $date);
                if (count($date)==2) {
                    $date[1] = strtotime('+ 1 day', strtotime($date[1]));
                    $query->where('ctime', 'between time', [$date[0], $date[1]]);
                }
            }

            if ($client) {
                if ($client == -1) {
                    $query->where(['from_platform' => 1]);
                }
            }

            if ($is_pay == 1) {
                $query->where(['is_pay' => $is_pay]);
            } else if ($is_pay == 2) {
                $query->where(['is_pay' => 0]);
            }

            $count = $query->count('id');

            $list = $query->order('ctime', 'desc')->page($this->page)->limit($this->limit)->select();

            //$list = $list->toArray();

            foreach ($list as $k=>$v) {
                $list[$k]['order_sn'] = '<a href="https://mobile.yangkeduo.com/friend_pay.html?fp_id='.$v['fp_id'].'" target="_blank">'.$v['order_sn'].'</a>';
                if ($v->goods && $v->goods->goods_id) {
                    $list[$k]['goods_id'] = '<a href="https://mobile.yangkeduo.com/goods.html?goods_id=' . $v->goods->goods_id . '" target="_blank">' . $v->goods->goods_id . '</a>';
                    $list[$k]['stores_name'] = $v->goods->stores_name;
                } else {
                    $list[$k]['goods_id'] = 0;
                    $list[$k]['stores_name'] = '';
                }
                $list[$k]['is_pay'] = $v['is_pay'] == 1 ? '<span style="color:green">是</span>' : '否';
                $list[$k]['nick'] = $v['nick'];
                $list[$k]['pay_type'] = OrdersModel::$payment_alias[$v['pay_type']];
                if ($v->client && $v->client->nick) {
                    if ($list[$k]['from_platform'] == OrdersModel::FROM_ME) {
                        $list[$k]['api_order_sn'] = OrdersModel::$plaforms[OrdersModel::FROM_ME];
                    }
                    $list[$k]['from_platform'] = $v->client->nick;
                } else {
                    $list[$k]['from_platform'] = OrdersModel::$plaforms[$v['from_platform']];
                }
            }

            $total = $query->sum('total');

            return $this->ajax_list($list, $count, ['total'=>$total]);
        }

        if (ADMIN_ID==1) {
            $list = SystemUser::getDeledateList();
        } else {
            $list = SystemUser::getDeledateList(ADMIN_C_ID);
        }

        if (ADMIN_ID == 1) {
            $clients = Client::with('admin')->all();
        } else {
            $clients = Client::with('admin')->where(['id' => ADMIN_C_ID])->select();
        }

        $this->view->assign('clients', $clients);

        $this->view->assign('pay_types', OrdersModel::$payment_alias);

        $this->view->assign('list', $list);

        return $this->view->fetch();
    }

    /**
     * 获取员工
     */
    public function getstaffs()
    {
        return $this->ajax_list([]);
    }

    /**
     * 售后订单
     */
    public function after_sales()
    {

        if ($this->request->isAjax()) {
            return $this->ajax_list([]);
        }

        return $this->view->fetch();
    }

    /**
     * 商品列表
     */
    public function goods()
    {
        if ($this->request->isAjax()) {

            $stores = input('get.stores/d', 0);
            $goods_id = input('get.goods_id/d', 0);

            $where = [];

            if (ADMIN_ID != 1) {
                $where['c_id'] = ADMIN_C_ID;
            }

            if ($stores) {
                $where['stores_id'] = $stores;
            }

            if ($goods_id) {
                $where['goods_id'] = $goods_id . '';
            }

            $list = GoodsModel::with(['admin' => function ($query) {
                $query->field(['id', 'nick']);
            }, 'stores' => function($query){
                $query->field(['id', 'name']);
            }])->where($where)->order('ctime', 'desc')->page($this->page)->limit($this->limit)->select();

            foreach ($list as $v) {
                $v->goods_url = sprintf('<a href="%s" target="_blank">%s</a>', $v->goods_url, $v->goods_url);
            }

            $count = GoodsModel::where($where)->count('id');

            return $this->ajax_list($list, $count);
        }

        $where = [];

        if (ADMIN_ID != 1) {
            $where['c_id'] = ADMIN_C_ID;
        }

        $list = StoresModel::where($where)->select();

        $this->view->assign('list', $list);

        return $this->view->fetch();
    }

    /**
     * 添加商品
     */
    public function goods_add()
    {
        $where = [];

        if (ADMIN_ID != 1) {
            $where['c_id'] = ADMIN_C_ID;
        }

        $list = StoresModel::where($where)->select();
        $this->view->assign('list', $list);
        return $this->view->fetch();
    }

    /**
     * 获取商品信息
     */
    public function get_goods_info()
    {
        if ($this->request->isAjax()) {

            $goodsValidate = new GoodsValidate();

            $goodsValidate->goCheck();

            $data = $goodsValidate->getDataByRule(input('post.'));

            $result = Tools::getGoods($data['goods_url'], ADMIN_C_ID);

            $stores = Stores::get(['name' => $result['stores_name']]);

            if (! $stores || $stores->id != $data['stores_id']) {
                return $this->ajax_error('店铺名跟商品不匹配!');
            }

            $data = [
                'admin_uid' => ADMIN_ID,
                'stores_id' => $stores->id,
                'goods_url' => $data['goods_url'],
                'goods_name' => $result['goods_name'],
                'goods_id' => $result['goods_id'],
                'group_id' => $result['group_id'],
                'sku_id' => $result['sku_id'],
                'normal_price' => $result['normal_price'],
                'c_id' => ADMIN_C_ID,
            ];

            $goodsModel = GoodsModel::get(['goods_url'=>$data['goods_url']]);

            if (!$goodsModel) {
                $goodsModel = new GoodsModel($data);
            }

            $goodsModel->save($data);

            return $this->ajax_success('添加成功');
        }
    }

    /**
     * 商品状态
     */
    public function goods_status()
    {
        if ($this->request->isAjax()) {

            $id = input('id/a', 0);

            $status = input('val/d', 0);

            $where = [];

            if (ADMIN_ID != 1) {
                $where['c_id'] = ADMIN_C_ID;
            }

            $result = GoodsModel::where(['id' => $id] + $where)->update(['status' => $status]);

            if ($result) {
                return $this->ajax_success('更新成功');
            } else {
                return $this->ajax_error('更新失败');
            }

        }
    }

    /**
     * 商品上下架
     */
    public function goods_is_upper()
    {
        if ($this->request->isAjax()) {

            $id = input('id/d', 0);

            $is_upper = input('is_upper/d', 0);

            $where = [];

            if (ADMIN_ID != 1) {
                $where['c_id'] = ADMIN_C_ID;
            }

            $result = GoodsModel::where(['id' => $id] + $where)->update(['is_upper' => $is_upper]);

            if ($result) {
                return $this->ajax_success('更新成功');
            } else {
                return $this->ajax_error('更新失败');
            }

        }
    }

    /**
     * 移动店铺
     */
    public function goods_move()
    {
        if ($this->request->isAjax()) {

            $id = input('id/d', 0);

            $stores_id = input('stores_id/d', 0);

            $where = [];

            if (ADMIN_ID != 1) {
                $where['c_id'] = ADMIN_C_ID;
            }

            $result = GoodsModel::where(['id'=>$id]+$where)->update(['stores_id'=>$stores_id]);

            if ($result) {
                return $this->ajax_success('移动成功');
            } else {
                return $this->ajax_error('移动失败');
            }

        }
    }

    /**
     * 商品删除
     */
    public function goods_del()
    {

        $id = input('id/d', 0);

        $where = [];

        if (ADMIN_ID != 1) {
            $where['c_id'] = ADMIN_C_ID;
        }

        $result = GoodsModel::where(['id' => $id] + $where)->delete();

        if ($result) {
            return $this->success('删除成功');
        } else {
            return $this->error('删除失败');
        }

    }

    /**
     * 店铺列表
     */
    public function stores()
    {
        if ($this->request->isAjax()) {

            $stores = input('get.stores/d', 0);

            $where = [];

            if (ADMIN_ID != 1) {
                $where['c_id'] = ADMIN_C_ID;
            }

            if ($stores) {
                $where['id'] = $stores;
            }

            $list = StoresModel::with(['admin'=>function($query){
                $query->field(['id','nick']);
            }])->where($where)->order('ctime', 'desc')->page($this->page)->limit($this->limit)->select();

            foreach ($list as $row) {
                $row->store_remain_total = $row->store_remain_total == StoresModel::$max_total ? 0 : $row->store_remain_total;
                if ($row->order_total == 0) {
                    $row->scale = '0%';
                } else {
                    $row->scale = sprintf("%.2f", $row->cur_total / $row->order_total * 100) . '%';
                }
            }

            $count = StoresModel::where($where)->count('id');

            return $this->ajax_list($list, $count);

        }

        $where = [];

        if (ADMIN_ID != 1) {
            $where['c_id'] = ADMIN_C_ID;
        }

        $list = StoresModel::where($where)->select();

        $this->view->assign('list', $list);

        return $this->view->fetch();
    }

    /**
     * 添加店铺
     */
    public function stores_add()
    {
        if ($this->request->isAjax()) {

            $storesValidate = new StoresValidate();

            $storesValidate->goCheck();

            $data = $storesValidate->getDataByRule(input('post.'));

            $data = $data + [
                'admin_uid' =>  ADMIN_ID,
                    'c_id' => ADMIN_C_ID,
                ];

            $storesModel = StoresModel::get(['name' => $data['name'], 'c_id' => ADMIN_C_ID]);

            if ($storesModel) {

                return $this->ajax_error('店铺已存在');

            }

            $storesModel = new StoresModel($data);

            $storesModel->save();

            return $this->ajax_success('添加成功');

        }
        return $this->view->fetch();
    }

    /**
     * 保存总额
     */
    public function stores_remain_total()
    {
        if ($this->request->isPost()) {

            $id = input('post.id/d', 0);

            $store_remain_total = input('post.store_remain_total/d', 0);

            if ($store_remain_total == 0) {
                $store_remain_total = StoresModel::$max_total;
            }

            $where = [];

            if (ADMIN_ID != 1) {
                $where['c_id'] = ADMIN_C_ID;
            }

            $result = StoresModel::where(['id'=>$id]+$where)->update(['store_remain_total'=>$store_remain_total]);

            if ($result) {
                return $this->ajax_success('更新成功');
            } else {
                return $this->ajax_error('更新失败');
            }

        }
    }

    /**
     * 商铺改名
     */
    public function stores_rename()
    {
        if ($this->request->isAjax()) {
            $id = input('post.id/d', 0);
            $name = input('post.name/s', '');
            $where = [];
            if (ADMIN_ID != 1) {
                $where['c_id'] = ADMIN_C_ID;
            }
            $result = StoresModel::where(['id'=>$id]+$where)->update(['name'=>$name]);
            if ($result) {
                return $this->ajax_success('修改成功');
            } else {
                return $this->ajax_error('修改失败');
            }
        }
    }

    /**
     * 店铺状态
     */
    public function stores_status()
    {
        if ($this->request->isAjax()) {

            $id = input('id/a', 0);

            $status = input('val/d', 0);

            $where = [];

            if (ADMIN_ID != 1) {
                $where['c_id'] = ADMIN_C_ID;
            }

            $result = Stores::where(['id' => $id] + $where)->update(['status' => $status]);

            if ($result) {
                return $this->ajax_success('更新成功');
            } else {
                return $this->ajax_error('更新失败');
            }

        }
    }

    /**
     * 帐号列表
     */
    public function users()
    {
        if ($this->request->isAjax()) {

            $where = [];

            if (ADMIN_ID != 1) {
                $where = [
                    'c_id' => ADMIN_C_ID
                ];
            }

            $phone = input('get.phone/s', '');

            $query = UserModel::with(['admin'=>function($query){
                $query->field(['id','nick']);
            }])->where($where);

            if ($phone) {
                $query->where('phone', 'like', "%{$phone}%");
            }

            $list = $query->order('ctime', 'desc')->page($this->page)->limit($this->limit)->select();

            $count = $query->count('id');

            return $this->ajax_list($list, $count);

        }
        return $this->view->fetch();
    }

    /**
     * 用户状态
     */
    public function users_status()
    {
        if ($this->request->isAjax()) {

            $id = input('param.id/a', 0);

            $status = input('param.val/d', 0);

            $where = [];

            if (ADMIN_ID != 1) {
                $where['c_id'] = ADMIN_C_ID;
            }

            $where['id'] = $id;

            $list = UserModel::where($where)->select();

            $result = true;

            foreach ($list as $user) {
                $user->status = $status;
                if ($status == 1) {
                    $user->is_expired = 0;
                    $user->expired_limit_noaddr = '<span style="color:green">正常</span>';
                }
                if (! $user->save()) {
                    $result = false;
                }
            }

            if ($result) {
                return $this->ajax_success('状态更新成功');
            } else {
                return $this->ajax_error('状态更新失败');
            }

        }
    }

    /**
     * 公共帐号
     */
    public function users_public()
    {
        if ($this->request->isAjax()) {

            $where = [
                'admin_uid' => 1
            ];

            $phone = input('get.phone/s', '');

            if ($phone) {
                $where['id'] =  $phone;
            }

            $query = UserModel::with(['admin'=>function($query){
                $query->field(['id','nick']);
            }])->where($where);

            $list = $query->order('ctime', 'desc')->page($this->page)->limit($this->limit)->select();

            $count = $query->count('id');

            return $this->ajax_list($list, $count);

        }

        $where = [];

        if (ADMIN_ID != 1) {
            $where['id'] = ADMIN_ID;
        }

        $phoneList = UserModel::where($where)->column('phone', 'id');

        $this->view->assign('phoneList', $phoneList);

        return $this->view->fetch();
    }

    /**
     * 添加帐号
     */
    public function users_add()
    {
        if ($this->request->isAjax() && $this->request->isPost()) {

            $userValidate = new UserValidate();

            $userValidate->goCheck();

            $inputData = $userValidate->getDataByRule(input('post.'));

            $result = MobileLogin::login($inputData['phone'], $inputData['code']);

            $admin_user = session('admin_user');

            $userModel = UserModel::get(['phone'=>$inputData['phone']]);

            $saveData = [
                'phone' => $inputData['phone'],
                'access_token' => $result['access_token'],
                'acid' => $result['acid'],
                'uid' => intval($result['uid']),
                'uin' => $result['uin'],
                'admin_uid' => $admin_user['uid'],
                'ip' => $this->request->ip(),
                'status' => 1,
                'is_expired' => 0,
                'expired_limit_noaddr' => '<span style="color:green">正常</span>',
                'c_id' => ADMIN_C_ID,
            ];

            $msg = '更新成功';

            if (!$userModel) {
                $userModel = new UserModel();
                $msg = '添加成功';
            }

            $userModel->save($saveData);

            return $this->ajax_success($msg, $result, ['access_token'=>$result['access_token']]);

        } else {
            return $this->view->fetch();
        }
    }

    /**
     * 添加QQ
     */
    public function qq_add()
    {
        if ($this->request->isAjax() && $this->request->isPost()) {

            $qq = input('param.qq/d', 0);
            $token = input('param.token/s', '');
            $uid = input('param.uid/d', 0);

            if (! $qq) {
                return $this->ajax_error('QQ不能为空');
            }

            if (! $token) {
                return $this->ajax_error('token不能为空');
            }

            if (! $uid) {
                return $this->ajax_error('uid不能为空');
            }

            $saveData = [
                'phone' => $qq,
                'access_token' => $token,
                'uid' => $uid,
                'admin_uid' => ADMIN_ID,
                'ip' => $this->request->ip(),
                'status' => 1,
                'is_expired' => 0,
                'expired_limit_noaddr' => '<span style="color:green">正常</span>',
                'c_id' => ADMIN_C_ID,
            ];

            $msg = '更新成功';

            $userModel = UserModel::get(['phone' => $qq]);

            if (!$userModel) {
                $userModel = new UserModel();
                $msg = '添加成功';
            }

            $userModel->save($saveData);

            return $this->ajax_success($msg);

        } else {
            return $this->view->fetch();
        }
    }

    /**
     * 添加收货地址
     */
    public function saveaddress()
    {
        if (!$this->request->isPost()) return '';

        $addressValidate = new AddressValidate();

        $addressValidate->goCheck();

        $inputData = $addressValidate->getDataByRule(input('post.'));

        $userInfo = UserModel::get(['phone'=>$inputData['phone']]);

        $mobileClient = new MobileClient($userInfo);

        $phone = $inputData['phone'];
        $address_name = $inputData['address_name'];
        $address_province = $inputData['address_province'];
        $address_city = $inputData['address_city'];
        $address_district = $inputData['address_district'];
        $address_concret = $inputData['address_concret'];

        $result = $mobileClient->addAddress($address_name, $phone, $address_concret, $address_district, $address_city, $address_province);

        $userInfo->address_id = $result['default_id'];

        $userInfo->is_expired = 0;

        $userInfo->expired_limit_noaddr = '<span style="color:green">正常</span>';

        $userInfo->save();

        return $this->ajax_success('添加成功', $result);
    }

    /**
     * 获取地址模板
     */
    public function getaddresstpl()
    {
        if(!$this->request->isPost()) return '';

        $addresstplValidate = new AddressTplValidate();

        $addresstplValidate->goCheck();

        $inputData = $addresstplValidate->getDataByRule(input('post.'));

        $userInfo = UserModel::get(['phone'=>$inputData['phone']]);

        $mobileClient = new MobileClient($userInfo);

        $result = $mobileClient->getaddresstpl($inputData['region_id']);

        return $this->ajax_success('', $result);
    }

    /**
     * 员工列表
     */
    public function staffs()
    {
        return $this->view->fetch();
    }

    /**
     * 添加员工
     */
    public function staffs_add()
    {
        return $this->view->fetch();
    }

    /**
     * 提现申请
     */
    public function cash_add()
    {

        $user = SystemUser::with(['client', 'banks'])->get(ADMIN_ID);

        $cash_fee_c = $user->client ? $user->client->cash_fee * 0 : 0;

        if ($this->request->isPost()) {

            $total = input('param.total/d', 0);
            $cash_fee = sprintf('%.2f', $total * $cash_fee_c);
            $bank_id = input('param.bank_id/d', 0);
            $google_code = input('param.google_code/s', 0);

            $ga = new GoogleAuthenticator();

            if (! $ga->verifyCode($user->client->google_secret, $google_code, 2)) {
                return $this->ajax_error('Google验证码错误');
            }

            if (! $total) {
                return $this->ajax_error('提现金额不能为空');
            }


            $client_total = $user->client ? $user->client->total : 0;

            if (($total + $cash_fee) > $client_total) {
                return $this->ajax_error('提现余额不足');
            }

            $banks = $user->banks->toArray();

            $banks = array_column($banks, null, 'id');

            if (! array_key_exists($bank_id, $banks) || $user->banks->isEmpty()) {
                return $this->ajax_error('代收银行不能为空');
            }

            $admins = SystemUser::getFinance(ADMIN_C_ID);

            if ($admins) {
                $f_id = $admins->id;
                $admins->mtime = time();
                $admins->save();
            } else {
                $f_id = 0;
            }

            \Db::startTrans();
            try {
                $pre_balance = $user->client->total;
                $user->client->total = $user->client->total - ($total + $cash_fee);
                $cashModel = new Cash([
                    'total' => $total,
                    'fee' => $cash_fee,
                    'cash_value' => $total,
                    'pre_balance' => $pre_balance,
                    'balance' => $user->client->total,
                    'bank_title' => $banks[$bank_id]['title'],
                    'bank_name' => $banks[$bank_id]['name'],
                    'bank_address' => $banks[$bank_id]['address'],
                    'admin_uid' => ADMIN_ID,
                    'f_id' => $f_id,
                ]);
                $cashModel->save();
                $result = $user->client->where(['id' => $user->client->id])->dec('total', $total)->update();
                if ($result) {
                    \Db::commit();
                    return $this->ajax_success('申请成功');
                } else {
                    \Db::rollback();
                    return $this->ajax_error('申请失败');
                }
            } catch (Exception $e) {
                \Db::rollback();
                throw $e;
            }
        } else if ($this->request->isAjax() && $this->request->isGet()) {

            $total = input('param.total/d', 0);

            $cash_fee = sprintf('%.2f', $total * $cash_fee_c);

            $cash_value = intval($total - $cash_fee);

            return $this->ajax_success('', [
                'cash_fee' => $cash_fee,
                'cash_value' => $cash_value,
            ]);
        } else {

            $total = $user->client ? $user->client->total : 0;
            $cash_fee = sprintf('%.2f', $total * $cash_fee_c);
            $cash_value = intval($total - $cash_fee);
            $cash_fee = sprintf('%.2f', $cash_value * $cash_fee_c);

            $this->view->assign('user', $user);
            $this->view->assign('total', $total);
            $this->view->assign('cash_fee', $cash_fee);
            $this->view->assign('cash_value', $cash_value);
            return $this->view->fetch();
        }
    }

    /**
     * 绑定google验证器
     */
    public function google_bind()
    {

        $user = SystemUser::get(ADMIN_ID);

        $this->view->assign('user', $user);

        if ($user->client) {
            $ga = new GoogleAuthenticator();

            if (!$user->client->google_secret) {
                $user->client->google_secret = $ga->createSecret();
                $user->client->save();
            }

            $qrCodeUrl = $ga->getQRCodeGoogleUrl('pinduoduo', $user->client->google_secret);
            $this->view->assign('secret', $user->client->google_secret);
            $this->view->assign('qrCodeUrl', $qrCodeUrl);
        }

        return $this->view->fetch();

    }

    /**
     * 结算管理
     */
    public function settlement()
    {

        if ($this->request->isAjax()) {

            $where = [];

            if (ADMIN_ID > 1) {
                $where['f_id'] = ADMIN_ID;
            }

            $list = Cash::with('admin,finance')->where($where)->order('c_time', 'desc')->page($this->page)->limit($this->limit)->select();

            $count = Cash::where($where)->count('id');

            return $this->ajax_list($list, $count);

        }

        return $this->view->fetch();
    }

    /**
     * 结算状态
     */
    public function settlement_status()
    {

        if ($this->request->isAjax()) {

            $id = input('id/d', 0);

            $status = input('val/d', 0);

            $cash = Cash::get(['id' => $id]);

            if (!$cash || $cash->status > 0) {
                return $this->ajax_error('支付失败');
            }

            $cash->status = $status;

            $result = $cash->save();

            if ($result) {
                return $this->ajax_success('支付成功');
            } else {
                return $this->ajax_error('支付失败');
            }

        }
    }

    /**
     * 结算取消
     */
    public function settlement_cancel()
    {

        if ($this->request->isAjax()) {

            $id = input('id/d', 0);

            $status = input('val/d', 0);

            $cash = Cash::get(['id' => $id]);

            if (!$cash || $cash->status > 0) {
                return $this->ajax_error('取消失败');
            }

            if ($status == 1) $status = 2;

            $cash->status = $status;

            $client = Client::get(['admin_uid' => $cash->admin_uid]);

            if (! $client) {
                return $this->ajax_error('取消失败');
            }

            $client->total = $client->total + $cash->total + $cash->fee;

            \Db::startTrans();
            try{

                $result1 = $cash->save();

                $result2 = $client->save();

                if ($result1 && $result2) {
                    // 提交事务
                    \Db::commit();
                    return $this->ajax_success('取消成功');
                } else {
                    // 回滚事务
                    \Db::rollback();
                    return $this->ajax_error('取消失败');
                }

            } catch (\Exception $e) {
                // 回滚事务
                \Db::rollback();
                throw $e;
            }

        }
    }

    /**
     * 我的结算
     */
    public function my_settlement()
    {
        if ($this->request->isAjax()) {

            $where = [];

            if (ADMIN_ID != 1) {
                $where['admin_uid'] = ADMIN_ID;
            }

            $list = Cash::with('admin,finance')->where($where)->order('c_time', 'desc')->page($this->page)->limit($this->limit)->select();

            $count = Cash::where($where)->count('id');

            return $this->ajax_list($list, $count);

        }

        return $this->view->fetch();
    }

    /**
     * 结算取消
     */
    public function my_settlement_cancel()
    {

        if ($this->request->isAjax()) {

            return $this->ajax_error('取消失败');

            $id = input('id/d', 0);

            $status = input('val/d', 0);

            $cash = Cash::get(['id' => $id, 'admin_uid' => ADMIN_ID]);

            if (!$cash || $cash->status > 0) {
                return $this->ajax_error('取消失败');
            }

            if ($status == 1) $status = 2;

            $cash->status = $status;

            $client = Client::get(['admin_uid' => $cash->admin_uid]);

            if (! $client) {
                return $this->ajax_error('取消失败');
            }

            $client->total = $client->total + $cash->total + $cash->fee;

            \Db::startTrans();
            try{

                $result1 = $cash->save();

                $result2 = $client->save();

                if ($result1 && $result2) {
                    // 提交事务
                    \Db::commit();
                    return $this->ajax_success('取消成功');
                } else {
                    // 回滚事务
                    \Db::rollback();
                    return $this->ajax_error('取消失败');
                }

            } catch (\Exception $e) {
                // 回滚事务
                \Db::rollback();
                throw $e;
            }

        }
    }

    /**
     * 银行列表
     */
    public function bank()
    {

        if ($this->request->isAjax()) {

            $where = [];

            if (ADMIN_ID != 1) {
                $where['admin_uid'] = ADMIN_ID;
            }

            $list = BankModel::with('admin')->where($where)->page($this->page)->limit($this->limit)->select();

            $count = BankModel::where($where)->count('id');

            return $this->ajax_list($list, $count);

        }

        return $this->view->fetch();
    }

    /**
     * 添加银行
     */
    public function bank_add()
    {

        if ($this->request->isAjax()) {

            $bankValidate = new BankValidate();

            $bankValidate->goCheck();

            $data = $bankValidate->getDataByRule(input('post.'));

            $data = $data + [
                    'admin_uid' =>  ADMIN_ID,
                ];

            $storesModel = new BankModel($data);

            $storesModel->save();

            return $this->ajax_success('添加成功');

        }

        return $this->view->fetch();
    }

    /**
     * 修改银行名称
     */
    public function bank_retitle()
    {

        if ($this->request->isPost()) {

            $id = input('post.id/d', 0);

            $title = input('post.title/s', '');

            $where = [];

            if (ADMIN_ID != 1) {
                $where['admin_uid'] = ADMIN_ID;
            }

            $result = BankModel::where(['id'=>$id]+$where)->update(['title'=>$title]);

            if ($result) {
                return $this->ajax_success('更新成功');
            } else {
                return $this->ajax_error('更新失败');
            }

        }

    }

    /**
     * 修改收款人姓名
     */
    public function bank_rename()
    {

        if ($this->request->isAjax()) {
            $id = input('post.id/d', 0);
            $name = input('post.name/s', '');
            $where = [];
            if (ADMIN_ID != 1) {
                $where['admin_uid'] = ADMIN_ID;
            }
            $result = BankModel::where(['id'=>$id]+$where)->update(['name'=>$name]);
            if ($result) {
                return $this->ajax_success('修改成功');
            } else {
                return $this->ajax_error('修改失败');
            }
        }

    }

    /**
     * 修改收款账号
     */
    public function bank_readdress()
    {

        if ($this->request->isAjax()) {

            $id = input('post.id/d', 0);
            $address = input('post.address/s', '');
            $where = [];
            if (ADMIN_ID != 1) {
                $where['admin_uid'] = ADMIN_ID;
            }
            $result = BankModel::where(['id'=>$id]+$where)->update(['address'=>$address]);
            if ($result) {
                return $this->ajax_success('修改成功');
            } else {
                return $this->ajax_error('修改失败');
            }

        }

    }

    /**
     * 删除银行
     */
    public function bank_del()
    {

        $id = input('id/d', 0);

        $where = [];

        if (ADMIN_ID!=1) {
            $where['admin_uid'] = ADMIN_ID;
        }

        $result = BankModel::where(['id'=>$id]+$where)->delete();

        if ($result) {
            return $this->success('删除成功');
        } else {
            return $this->error('删除失败');
        }

    }

    /**
     * 一分钟订单支付
     */
    public function OnPayOneMinute()
    {
        if ($this->request->isPost()) {
            $onPayOneMinute = new OnPayOneMinute('OnPayOneMinute');

            $onPayOneMinute->execute(new Input([]), new Output());

            $this->success('一分钟订单支付成功');
        } else {
            return $this->view->fetch();
        }
    }

    /**
     * 五分钟订单支付
     */
    public function OnPayFiveMinute()
    {
        if ($this->request->isPost()) {
            $onPayFiveMinute = new OnPayFiveMinute('OnPayFiveMinute');

            $onPayFiveMinute->execute(new Input([]), new Output());

            $this->success('五分钟订单成功');
        } else {
            return $this->view->fetch();
        }
    }

    /**
     * 确认收货
     */
    public function Received()
    {
        if ($this->request->isPost()) {
            $received = new Received('Received');

            $received->execute(new Input([]), new Output());

            $this->success('确认收货成功');
        } else {
            return $this->view->fetch();
        }
    }

    /**
     * 统计
     */
    public function Statistic()
    {
        if ($this->request->isPost()) {
            $statistic = new Statistic('Statistic');

            $statistic->execute(new Input([]), new Output());

            $this->success('统计成功');
        } else {
            return $this->view->fetch();
        }
    }

    /**
     * 一键导入
     */
    public function onekey()
    {
        if ($this->request->isPost()) {
            $content = input('param.content');
            $content = str_replace("\r\n", "\n", $content);
            $list = explode("\n", $content);
            $list = array_filter($list);
            foreach ($list as $v) {

                $arr = preg_split('/\-+/', $v);

                $data = [
                    'phone' => $arr[0],
                    'uid' => $arr[1],
                    'access_token' => $arr[2],
                    'admin_uid' => ADMIN_ID,
                    'ip' => $this->request->ip(),
                    'status' => 1,
                    'c_id' => ADMIN_C_ID,
                ];

                $userInfo = UserModel::get(['phone' => $data['phone']]);

                if (! $userInfo) {
                    $userInfo = new UserModel($data);
                }

                $mobileClient = new MobileClient($userInfo);
                $addressModel = Address::order('date', 'asc')->find();

                $address_name = (new RndChinaName())->getName();
                $phone = Mobile::randomMobile();
                $address_concret = $addressModel->address_concret;
                $address_district = $addressModel->address_district;
                $address_city = $addressModel->address_city;
                $address_province = $addressModel->address_province;

                $result = $mobileClient->addAddress($address_name, $phone, $address_concret, $address_district, $address_city, $address_province);

                if (! isset($result['default_id'])) continue;

                $userInfo->address_id = $result['default_id'];
                $userInfo->is_expired = 0;
                $userInfo->expired_limit_noaddr = '<span style="color:green">正常</span>';
                $userInfo->save();

                $addressModel->date = date('Y-m-d H:i:s');
                $addressModel->save();

            }
            return $this->ajax_success('添加完成');
        } else {
            return $this->view->fetch();
        }
    }

    /**
     * 商户中心
     */
    public function clients()
    {
        $list = SystemUser::getClientList();
        $this->view->assign('list', $list);
        return $this->view->fetch();
    }

    /**
     * 设置商户费率
     */
    public function client_fee()
    {
        if (ADMIN_ID != 1) return $this->ajax_error('更新失败');
        $id = input('param.id/d', 0);
        $cash_fee = input('param.cash_fee/f', 0);
        $result = Client::where(['id' => $id])->update(['cash_fee' => $cash_fee]);
        if ($result) {
            return $this->ajax_success('更新成功!');
        } else {
            return $this->ajax_error('更新失败!');
        }
    }

    /**
     * 测试
     */
    public function test()
    {

        die();

        StoresModel::where(['id' => 1])->inc('cur_total', 10)->update();

        die();

        $goods_list = Goods::hasWhere('stores', ['Stores.status' => 1])->where('Stores.cur_total', '<', 'Stores.store_remain_total')->where([
            'Goods.status' => 1,
            'Goods.is_upper' => 1,
            'Goods.c_id' => 0,
        ])->order('Goods.last_use_time', 'asc')->page(1)->limit(10)->select();

        die();

        $admins = SystemUser::getFinance(ADMIN_C_ID);

        var_dump($admins);

    }

}